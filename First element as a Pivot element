#include &lt;iostream&gt;
using namespace std;
int partition(int arr[], int start, int end)
{
int pivot = arr[start];
int count = 0;
for (int i = start + 1; i &lt;= end; i++)
{
if (arr[i] &lt;= pivot)
count++;
}
int pivotIndex = start + count;
swap(arr[pivotIndex], arr[start]);
int i = start, j = end;
while (i &lt; pivotIndex &amp;&amp; j &gt; pivotIndex)
{
while (arr[i] &lt;= pivot)
{

i++;
}
while (arr[j] &gt; pivot)
{
j--;
}
if (i &lt; pivotIndex &amp;&amp; j &gt; pivotIndex)
{
swap(arr[i++], arr[j--]);
}
}
return pivotIndex;
}
void quickSort(int arr[], int start, int end)
{
if (start &gt;= end)
return;
int p = partition(arr, start, end);
quickSort(arr, start, p - 1);
quickSort(arr, p + 1, end);
}
int main()
{
int size = 0;
cout &lt;&lt; &quot;Enter Size of array: &quot; &lt;&lt; endl;
cin &gt;&gt; size;
int arr[size];

cout &lt;&lt; &quot;Enter &quot; &lt;&lt; size &lt;&lt; &quot; integers in any order: &quot; &lt;&lt; endl;
for (int i = 0; i &lt; size; i++)
{

cin &gt;&gt; arr[i];
}
cout &lt;&lt; endl;
quickSort(arr, 0, size - 1);
for (int i = 0; i &lt; size; i++)
{
cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;
}
return 0;
}
